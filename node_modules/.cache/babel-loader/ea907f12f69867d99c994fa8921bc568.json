{"ast":null,"code":"import _slicedToArray from \"/Users/vaggelis/Documents/react/reacttodoapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/vaggelis/Documents/react/reacttodoapp/src/ComponentsContextApi/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport ToDoList from \"./ToDoList\";\nimport UserInput from \"./UserInput\";\nimport Context from \"./Context\";\nimport ShowItems from \"../ComponentsContextApi/ShowItems\"; // Ideally you must refactor the app 3 times:\n// 1) using useState()\n// 2) using Context API\n// 3) using Redux\n// uuid for the keys\n// State Structure: list = [{ id: Number, task: String, done: Boolean }, {....}]\n// <TodoItem item={{ id, task, done }}  />\n\n/* \nPlanning and Managing the State: start as specific as possible and move up according\nto the needs of the app.\n<Navbar></Navbar>\n<App>\n  // App State / Context API / Redux\n    <TodoInput></TodoInput>\n    <TodoList>\n      <TodoItem />\n      <TodoItem />\n      <TodoItem />\n    </TodoList>\n  // App State\n</App>\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      excludeItems = _useState4[0],\n      setExcludeItems = _useState4[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App text-center\",\n    children: /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: {\n        items: items,\n        setItems: setItems,\n        excludeItems: excludeItems,\n        setExcludeItems: setExcludeItems\n      },\n      children: [/*#__PURE__*/_jsxDEV(ShowItems, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToDoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zIm7ZRv7Y+e/uWqGOy5NcLoz5s0=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vaggelis/Documents/react/reacttodoapp/src/ComponentsContextApi/App.jsx"],"names":["React","useRef","useState","ToDoList","UserInput","Context","ShowItems","App","items","setItems","excludeItems","setExcludeItems"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,mCAAtB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,kBAA0BL,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOM,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAuCP,QAAQ,CAAC,EAAD,CAA/C;AAAA;AAAA,MAAOQ,YAAP;AAAA,MAAoBC,eAApB;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,2BACE,QAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAE;AAAEH,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,QAAQ,EAARA,QAAT;AAAmBC,QAAAA,YAAY,EAAZA,YAAnB;AAAiCC,QAAAA,eAAe,EAAfA;AAAjC,OAAzB;AAAA,8BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAbuBJ,G;;KAAAA,G","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport ToDoList from \"./ToDoList\";\nimport UserInput from \"./UserInput\";\nimport Context from \"./Context\";\nimport ShowItems from \"../ComponentsContextApi/ShowItems\";\n\n// Ideally you must refactor the app 3 times:\n// 1) using useState()\n// 2) using Context API\n// 3) using Redux\n\n// uuid for the keys\n// State Structure: list = [{ id: Number, task: String, done: Boolean }, {....}]\n// <TodoItem item={{ id, task, done }}  />\n\n/* \nPlanning and Managing the State: start as specific as possible and move up according\nto the needs of the app.\n<Navbar></Navbar>\n<App>\n  // App State / Context API / Redux\n    <TodoInput></TodoInput>\n    <TodoList>\n      <TodoItem />\n      <TodoItem />\n      <TodoItem />\n    </TodoList>\n  // App State\n</App>\n*/\nexport default function App() {\n  const [items, setItems] = useState([]);\n  const [excludeItems,setExcludeItems] = useState([]);\n\n  return (\n    <div className=\"App text-center\">\n      <Context.Provider value={{ items, setItems, excludeItems, setExcludeItems }}>\n        <ShowItems/>\n        <UserInput />\n        <ToDoList />\n      </Context.Provider>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}